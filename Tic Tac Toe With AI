import java.util.Scanner;

class TicTacToe {

    
    static final char PLAYER_X = 'X';  
    static final char PLAYER_O = 'O';  

    static class Move {
        int row, col;
    }

    private static int evaluateBoard(char[][] board) {
        // Check rows for winner
        for (int row = 0; row < 3; row++) {
            if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
                if (board[row][0] == PLAYER_X) {
                    return 10;  // AI wins
                } else if (board[row][0] == PLAYER_O) {
                    return -10;  // Opponent wins
                }
            }
        }

        for (int col = 0; col < 3; col++) {
            if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
                if (board[0][col] == PLAYER_X) {
                    return 10;  // AI wins
                } else if (board[0][col] == PLAYER_O) {
                    return -10;  
                }
            }
        }

        
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == PLAYER_X) {
                return 10;  
            } else if (board[0][0] == PLAYER_O) {
                return -10;  
            }
        }

        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == PLAYER_X) {
                return 10;  // AI wins
            } else if (board[0][2] == PLAYER_O) {
                return -10;  
            }
        }

        
        return 0;
    }

    public static boolean isMoveLeft(char[][] board) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row][col] == '-') {
                    return true;  
                }
            }
        }
        return false;  
    }

    public static int minimax(char[][] board, int depth, boolean isMaximizingPlayer) {
        int score = evaluateBoard(board);

        
        if (score == 10) {
            return score;
        }

        
        if (score == -10) {
            return score;
        }

        
        if (!isMoveLeft(board)) {
            return 0;
        }

        if (isMaximizingPlayer) {
            int best = -1000;  

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    if (board[row][col] == '-') {
                        board[row][col] = PLAYER_X;  
                        best = Math.max(best, minimax(board, depth + 1, false)); 
                        board[row][col] = '-';  
                    }
                }
            }
            return best;
        } else {
            int best = 1000;  

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    if (board[row][col] == '-') {
                        board[row][col] = PLAYER_O;  
                        best = Math.min(best, minimax(board, depth + 1, true));  
                        board[row][col] = '-';  
                    }
                }
            }
            return best;
        }
    }

    
    public static Move findBestMove(char[][] board) {
        int bestVal = -1000;  
        Move bestMove = new Move();
        bestMove.row = -1;
        bestMove.col = -1;

        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row][col] == '-') {
                    board[row][col] = PLAYER_X;  
                    int moveVal = minimax(board, 0, false);
                    board[row][col] = '-';  

                    if (moveVal > bestVal) {
                        bestMove.row = row;
                        bestMove.col = col;
                        bestVal = moveVal;
                    }
                }
            }
        }

        return bestMove;
    }

    // Function to print the game board
    private static void printBoard(char[][] board) {
        System.out.println("|---|---|---|");
        for (int row = 0; row < 3; row++) {
            System.out.print("| ");
            for (int col = 0; col < 3; col++) {
                System.out.print(board[row][col] + " | ");
            }
            System.out.println("\n|---|---|---|");
        }
    }

    // Function to play Tic-Tac-Toe against AI
    public static void playWithAI() {
        char[][] board = {{'-', '-', '-'},
                {'-', '-', '-'},
                {'-', '-', '-'}};

        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter Your Name: ");
        String playerName = scanner.nextLine();

        // Loop to alternate between player turns
        while (true) {
            printBoard(board);

            // AI's turn (Player X)
            System.out.println(playerName + "'s turn (AI is 'X').");

            // AI makes the best move
            Move bestMove = findBestMove(board);
            board[bestMove.row][bestMove.col] = PLAYER_X;
            printBoard(board);

            // Check if AI wins
            if (evaluateBoard(board) == 10) {
                System.out.println("AI wins!");
                break;
            }

            // Check for tie
            if (!isMoveLeft(board)) {
                System.out.println("It's a tie!");
                break;
            }

            // Opponent's turn (Player O)
            System.out.println(playerName + "'s turn (Player is 'O').");
            int position = -1;
            boolean validMove = false;

            while (!validMove) {
                try {
                    System.out.print("Enter position (1-9): ");
                    position = scanner.nextInt();

                    // Validate input
                    if (position < 1 || position > 9) {
                        throw new IllegalArgumentException("Invalid input. Please enter a number between 1 and 9.");
                    }

                    // Convert position (1-9) to (row, col)
                    int row = (position - 1) / 3;
                    int col = (position - 1) % 3;

                    if (board[row][col] == '-') {
                        validMove = true;
                        board[row][col] = PLAYER_O;
                    } else {
                        System.out.println("Invalid move. Cell is already occupied.");
                    }

                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                } catch (Exception e) {
                    System.out.println("Invalid input. Please enter a valid number between 1 and 9.");
                    scanner.nextLine();  // Clear the buffer
                }
            }

            // Check if opponent wins
            if (evaluateBoard(board) == -10) {
                System.out.println(playerName + " wins!");
                break;
            }

            // Check for tie
            if (!isMoveLeft(board)) {
                System.out.println("It's a tie!");
                break;
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to Tic-Tac-Toe!");
        System.out.println("You will play against AI!");

        try {
            playWithAI();  // Play against AI
        } catch (Exception e) {
            System.out.println("An error occurred during the game: " + e.getMessage());
        }
    }
}
